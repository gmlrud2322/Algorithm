/*
1. 문제: 가운데를 말해요 (우선순위 큐)
정수를 하나씩 외칠때마다 지금까지 말한 수 중에서 중간값을 말해야 한다. 
만약, 그동안 외친 수의 개수가 짝수개라면 중간에 있는 두 수 중에서 작은 수를 말해야 한다.
예를 들어, 1, 5, 2, 10, -99, 7, 5를 순서대로 외쳤다고 하면, 
1, 1, 2, 2, 2, 2, 5를 차례대로 말해야 한다. 

입력) 첫째 줄에는 외치는 정수의 개수 N이 주어진다. 
      N은 1보다 크거나 같고, 100,000보다 작거나 같은 자연수이다. 
      그 다음 N줄에 걸쳐서 정수가 차례대로 주어진다. 
      정수는 -10,000보다 크거나 같고, 10,000보다 작거나 같다.
출력) 한 줄에 하나씩 N줄에 걸쳐 말해야하는 수를 순서대로 출력한다.

2. 풀이
PriorityQueue를 사용한다.
min과 max PriorityQueue를 만든다.
오름차순과 내림차순으로 생각할 때, min의 peek()값은 가장 작은 최솟값 max peek()값은 가장 큰 값이 된다.
그렇기 때문에 peek()값이 중간값이 되도록 만들어 준다.
max와 min의 크기가 같으면 max에 입력 값을 넣어준다.
max의 peek값이 중간 결과값이 되도록 할 것이다.
그 다음엔 min에 입력 값을 넣어준다. max의 peek값이 min의 peek값보다 크면 두 값을 스왑한다.
->작은수들중 큰값이 max의 peek값이 되고, 큰수들 중 작은 값이 min의 peek값이 된다.
max의 peek값을 출력하면 중간 값이 된다.

3. 한 번에 풀지 못했다면 이유?
방법을 생각 못했다. priorityqueue를 사용하지않고 구현을 했다면 굉장히 복잡했을것같다.
다음에 다시 풀어봐야 하는 문제.
------------------------------------------------------------------------------*/
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.util.ArrayList;
import java.util.PriorityQueue;

class Main{

  public static void main(String[] args) throws IOException{

    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
    int N=Integer.parseInt(br.readLine());
    PriorityQueue<Integer> min=new PriorityQueue<Integer>((o1, o2)->o1-o2);
    PriorityQueue<Integer> max=new PriorityQueue<Integer>((o1,o2)->o2-o1);
    ArrayList<Integer> result=new ArrayList<>();

    for(int i=0;i<N;i++){
      int num=Integer.parseInt(br.readLine());
        
      if(min.size()==max.size()){
        max.add(num);
      }
      else{
        min.add(num);
      }

      if(!min.isEmpty()&&!max.isEmpty()){
        if(min.peek()<max.peek()){
          int temp=min.poll();
          min.add(max.poll());
          max.add(temp);
        }
      }
      result.add(max.peek());
      
    }
    for(int i=0;i<result.size();i++){
      bw.write(result.get(i).toString()+"\n");
    }
    bw.close();
  }
}
