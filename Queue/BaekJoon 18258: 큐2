/*
1. 문제: 큐2
정수를 저장하는 큐를 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.

 push X: 정수 X를 큐에 넣는 연산이다.
 pop: 큐에서 가장 앞에 있는 정수를 빼고, 그 수를 출력한다. 
      만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
 size: 큐에 들어있는 정수의 개수를 출력한다.
 empty: 큐가 비어있으면 1, 아니면 0을 출력한다.
 front: 큐의 가장 앞에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.
 back: 큐의 가장 뒤에 있는 정수를 출력한다. 만약 큐에 들어있는 정수가 없는 경우에는 -1을 출력한다.

입력) 첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 2,000,000)이 주어진다. 
      둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 주어지는 정수는 1보다 크거나 같고, 
      100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.
출력) 출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다

2. 풀이
명령의 수 N은 1이상 2000000이하 이므로 결국 배열의 수2000000을 생성한다.
가장 앞에 있는 정수의 index를 담은 front,
가장 뒤에 있는 정수의 index back,
구현할 queue의 크기를 나타내는 size를 전역변수로 선언한다.
empty, size, front, back은 결국 size의 크기에 따라 답을 출력할 수 있다.
다만 back의 값은 push를 할 때, back++의 과정을 해주기 때문에
back값을 구하려면 -1을 해줘야한다.

3. 한 번에 풀지 못했다면 이유?
처음에 ArrayList를 사용하여 문제를 풀었다. 결과는 나왔지만 시간초과가 발생했다.
ArrayList는 시간이 많이 걸리기 때문에 LinkedList를 사용하거나 ->Deque
배열을 이용하여 방법이 있다고 한다.
그래서 Deque, Queue의 구조를 알고자 배열을 사용하여 구현했다.
--------------------------------------------------------------------------------*/

import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

class Main{
  static String[] num=new String[2000000]; 
  static int front=0;
  static int back=0;
  static int size=0;
  static StringBuilder sb;

  public static void main(String[] args) throws IOException{
    BufferedReader br= new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));

    int N=Integer.parseInt(br.readLine());
    sb=new StringBuilder();

    StringTokenizer st;
    for(int i=0;i<N;i++){
      st=new StringTokenizer(br.readLine());
      String cmd=st.nextToken();
      switch(cmd){
        case "push": 
        String x=st.nextToken();
        Push(x);
        break;
        case "pop": 
        Pop();
        break;
        case "size":
        Size(); 
        break;
        case "empty": 
        Empty();
        break;
        case "front": 
        Front();
        break;
        case "back": 
        Back();
        break;
      }
    }
    bw.write(sb.toString());
    bw.close();
  }
  static void Push(String x){
    num[back++]=x;
    size++;
  }
  static void Pop(){
    if(size==0){
      sb.append(-1).append('\n');
    }
    else{
      sb.append(num[front++]).append('\n');
      size--;
    }
  }
  static void Front(){
    if(size==0){
      sb.append(-1).append('\n');
    }
    else{
      sb.append(num[front]).append('\n');
    }
  }
  static void Back(){
    if(size==0){
      sb.append(-1).append('\n');
    }
    else{
      sb.append(num[back-1]).append('\n');
    }
  }
  static void Size(){
    sb.append(size).append('\n');
  }
  static void Empty(){
    if(size==0){
      sb.append(1).append('\n');
    }else{
      sb.append(0).append('\n');
    }
  }
}
