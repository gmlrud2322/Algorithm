/*
1. 문제: 회전하는 큐
이 큐에서 다음과 같은 3가지 연산을 수행할 수 있다.
  1)첫 번째 원소를 뽑아낸다. 이 연산을 수행하면, 원래 큐의 원소가 a1, ..., ak이었던 것이 a2, ..., ak와 같이 된다.
  2)왼쪽으로 한 칸 이동시킨다. 이 연산을 수행하면, a1, ..., ak가 a2, ..., ak, a1이 된다.
  3)오른쪽으로 한 칸 이동시킨다. 이 연산을 수행하면, a1, ..., ak가 ak, a1, ..., ak-1이 된다.
큐에 처음에 포함되어 있던 수 N이 주어진다. 그리고 뽑아내려고 하는 원소의 위치가 주어진다. (이 위치는 가장 처음 큐에서의 위치이다.) 
이때, 그 원소를 주어진 순서대로 뽑아내는데 드는 2번, 3번 연산의 최솟값을 출력하는 프로그램을 작성하시오.

입력) 첫째 줄에 큐의 크기 N과 뽑아내려고 하는 수의 개수 M이 주어진다. 
      N은 50보다 작거나 같은 자연수이고, M은 N보다 작거나 같은 자연수이다. 
      둘째 줄에는 지민이가 뽑아내려고 하는 수의 위치가 순서대로 주어진다. 
      위치는 1보다 크거나 같고, N보다 작거나 같은 자연수이다.
출력) 첫째 줄에 문제의 정답을 출력한다.

2. 풀이
LinkedList를 사용하여 deque를 구현한다. 
1부터 N까지의 값을 deque에 넣어준다. 
뽑아내려고 하는 원소들을 배열 a[]에 저장한다.
indexOf()를 사용하여 deque에서 a배열에 저장된 값과 일치하는 위치의 index를 구한다.
  ->count의 최솟값을 구해야 하기 때문에 가까운 쪽으로 연산해야함.
index의 위치가 deque의 앞쪽에 위치한다면 2번 연산, 뒷쪽에 위치한다면 3번 연산을 수행한다. 

3. 한 번에 풀지 못했다면 이유?
LinkedList에서는 indexOf()를 사용하면 해당 값의 index를 구할 수 있다는 것을 몰랐다.
indexOf()를 사용하여 index값을 안다면, 해당 값이 앞쪽에 있는지 뒷쪽에 있는지를 구분하여
2번 연산을 수행할지, 3번 연산을 수행할지 알 수 만 있다면 풀 수 있는 것 같다.

--------------------------------------------------------------------------*/

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.LinkedList;

class Main{
  public static void main(String[] args) throws IOException{
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));

    StringTokenizer st=new StringTokenizer(br.readLine()," ");
    int N=Integer.parseInt(st.nextToken());
    int M=Integer.parseInt(st.nextToken());
    
    st=new StringTokenizer(br.readLine()," ");
    LinkedList<Integer> dq=new LinkedList<Integer>();

    int[] a=new int[M];
    for(int i=0;i<M;i++){
      a[i]=Integer.parseInt(st.nextToken());
    }

    for(int i=1;i<=N;i++){
      dq.add(i);
    }

    int k=0;
    int count=0;
    for(int i=0;i<M;i++){
      int target_idx=dq.indexOf(a[i]); //dq에서 해당 값의 위치
      int half_idx;
      if(dq.size()%2==0){
        half_idx=dq.size()/2-1;
      }
      else{
        half_idx=dq.size()/2;
      }

      if(half_idx>=target_idx){// 해당 값이 중간보다 앞에 있을 때 2번   
        for(int j=0;j<target_idx;j++){
          dq.addLast(dq.poll());
          count++;
        }
      }
      else{//해당 값이 중간보다 뒤에 있으면 3번
        for(int j=0;j<dq.size()-target_idx;j++){
          dq.addFirst(dq.pollLast());
          count++;
        }
      }
      dq.poll();
    }
    bw.write(String.valueOf(count));
    bw.close();
  }
}
