/*
1. 문제: 요세푸스 문제0
요세푸스 문제는 다음과 같다.
1번부터 N번까지 N명의 사람이 원을 이루면서 앉아있고, 양의 정수 K(≤ N)가 주어진다. 이제 순서대로 K번째 사람을 제거한다. 
한 사람이 제거되면 남은 사람들로 이루어진 원을 따라 이 과정을 계속해 나간다. 
이 과정은 N명의 사람이 모두 제거될 때까지 계속된다. 원에서 사람들이 제거되는 순서를 (N, K)-요세푸스 순열이라고 한다. 
예를 들어 (7, 3)-요세푸스 순열은 <3, 6, 2, 7, 5, 1, 4>이다.
N과 K가 주어지면 (N, K)-요세푸스 순열을 구하는 프로그램을 작성하시오.

입력) 첫째 줄에 N과 K가 빈 칸을 사이에 두고 순서대로 주어진다. (1 ≤ K ≤ N ≤ 1,000)
출력) 예제와 같이 요세푸스 순열을 출력한다.

2. 풀이
1부터 N까지 Queue에 넣는다.
q를 poll()할 때 마다 count 해주고, 뒤에 다시 넣어준다.
count 변수가 K번째가 되면 출력 값 배열에 저장했다.

3. 한 번에 풀지 못했다면 이유?

----------------------------------------------------------------------------*/

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.Queue;
import java.util.LinkedList;

public class Main {
  
	public static void main(String[] args) throws IOException{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));

    StringTokenizer st=new StringTokenizer(br.readLine());
    int N=Integer.parseInt(st.nextToken());
    int K=Integer.parseInt(st.nextToken());
    int[] result=new int[N];

    Queue<Integer> q=new LinkedList<Integer>();
    for(int i=1;i<=N;i++){
      q.add(i);
    }
    StringBuilder sb=new StringBuilder();
    sb.append("<");
    int count=1;
    int a=0;
    while(!q.isEmpty()){
      if(count%K==0){
        result[a]=q.poll();
        a++;
      }
      else{
        q.add(q.poll());
      }
      count++;
    }
    bw.write("<");
    for(int i=0;i<N;i++){
      bw.write(String.valueOf(result[i]));
      if(i!=N-1){
        bw.write(", ");
      }
    }
    bw.write(">");
    bw.close();
  }
}
