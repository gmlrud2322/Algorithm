/*
1. 문제: 좌표 정렬
2차원 평면 위의 점 N개가 주어진다. 
좌표를 y좌표가 증가하는 순으로, y좌표가 같으면 x좌표가 증가하는 순서로 정렬한 다음 출력하는 프로그램을 작성하시오.

입력) 첫째 줄에 점의 개수 N (1 ≤ N ≤ 100,000)이 주어진다. 
      둘째 줄부터 N개의 줄에는 i번점의 위치 xi와 yi가 주어진다. (-100,000 ≤ xi, yi ≤ 100,000) 
      좌표는 항상 정수이고, 위치가 같은 두 점은 없다.
출력) 첫째 줄부터 N개의 줄에 점을 정렬한 결과를 출력한다.

2. 풀이
Arrays.sort()와 Comparator<T>를 사용하여 정렬할 수 있다.
yi(word[i][1])를 기준으로 먼저 오름차순 정렬을 해야한다.
따라서 y좌표를 비교하여 같으면->x좌표 오름차순으로 정렬, return o1[0]-o2[0];
그렇지 않으면 ->y좌표 오름차순 정렬, return o1[1]-o2[1];

3. 한 번에 풀지 못 했다면 이유?
Comparator<T>의 2차 배열 정렬할 때의 사용 방법
new Comparator<int[]>(){
   return o1[0]-o2[0]; // 첫 번째 자리 비교
   return o1[1]-o2[1]; // 두 번째 자리 비교
}

--------------------------------------------------------------------------*/

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;
import java.util.StringTokenizer;

public class Main {
  
	public static void main(String[] args) throws IOException{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
    StringTokenizer st;

    int N=Integer.parseInt(br.readLine());
    int[][] point=new int[N][2];

    for(int i=0;i<N;i++){
      st=new StringTokenizer(br.readLine()," ");
      point[i][0]=Integer.parseInt(st.nextToken());
      point[i][1]=Integer.parseInt(st.nextToken());
    }

    Arrays.sort(point, new Comparator<int[]>(){
      
      public int compare(int[] o1, int[] o2){
        if(o1[1]==o2[1]){
          return o1[0]-o2[0];
        }
        else{
          return o1[1]-o2[1];
        }
      }
    });

    for(int i=0;i<N;i++){
      bw.write(point[i][0]+" "+point[i][1]+'\n');
    }

    bw.close();
  }
}
