/*
1. 문제: 단어 정렬
알파벳 소문자로 이루어진 N개의 단어가 들어오면 아래와 같은 조건에 따라 정렬하는 프로그램을 작성하시오.
 -길이가 짧은 것부터
 -길이가 같으면 사전 순으로

입력) 첫째 줄에 단어의 개수 N이 주어진다. (1 ≤ N ≤ 20,000) 
      둘째 줄부터 N개의 줄에 걸쳐 알파벳 소문자로 이루어진 단어가 한 줄에 하나씩 주어진다. 
      주어지는 문자열의 길이는 50을 넘지 않는다.
출력) 조건에 따라 정렬하여 단어들을 출력한다. 
      단, 같은 단어가 여러 번 입력된 경우에는 한 번씩만 출력한다.
      
2. 풀이
문자열 정렬함수와 Comparator<T>()를 사용하여 배열의 문자열을 비교한다.
문자열의 길이가 같으면 compareTo()함수를 통해 사전 순으로 정렬해주고,
그렇지 않으면 문자열의 길이 오름차순으로 정렬한다.

3. 한 번에 풀지 못 했다면 이유?
compareTo() 함수는 "문자열의 비교" 와 "숫자의 비교" 두 방식이 존재한다.
숫자의 비교 같은 경우는 단순히 크다(1), 같다(0), 작다(-1) 의 관한 결과값을 리턴해주는 반면
문자열의 비교 같은 경우는 같다(0), 그 외 양수/음수값 같이 여러 결과를 반환해준다.
->차이를 아스키코드 값으로 반환해주기 때문에 사전순으로 정렬이 가능하다.

-----------------------------------------------------------------*/

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Comparator;

public class Main {
  
	public static void main(String[] args) throws IOException{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));

    int N=Integer.parseInt(br.readLine());

    String[] word=new String[N];
    for(int i=0;i<N;i++){
      word[i]=br.readLine();
    }
    Arrays.sort(word, new Comparator<String>(){
      public int compare(String s1, String s2){
        if(s1.length()==s2.length()){
          return s1.compareTo(s2);// 사전순 정렬
        }
        else{
          return s1.length()-s2.length();
        }
      }
    });

    bw.write(word[0]+'\n');
    for(int i=1;i<N;i++){
      if(!word[i].equals(word[i-1])){
        bw.write(word[i]+'\n');
      }
    }

    bw.close();
  }
}
