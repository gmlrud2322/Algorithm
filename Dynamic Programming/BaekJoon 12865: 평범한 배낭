/*
1. 문제: 평범한 배낭
여행에 필요하다고 생각하는 N개의 물건이 있다. 
각 물건은 무게 W와 가치 V를 가지는데, 해당 물건을 배낭에 넣어서 가면 V만큼 즐길 수 있다. 
최대 K만큼의 무게만을 넣을 수 있는 배낭만 들고 다닐 수 있다. 
최대한 즐거운 여행을 하기 위해 배낭에 넣을 수 있는 물건들의 가치의 최댓값을 알려주자.

입력) 첫 줄에 물품의 수 N(1 ≤ N ≤ 100)과 무게 K(1 ≤ K ≤ 100,000)가 주어진다. 
      두 번째 줄부터 N개의 줄에 거쳐 각 물건의 무게 W(1 ≤ W ≤ 100,000)와 
      해당 물건의 가치 V(0 ≤ V ≤ 1,000)가 주어진다.
출력) 한 줄에 배낭에 넣을 수 있는 물건들의 가치합의 최댓값을 출력한다.

2. 풀이
물품의 수 N과 무게 K 크기를 가진 dp를 이용한다.
무게 K일 때 들어갈 수 있는 물품의 가치를 dp값에 저장한다.
누적가치를 저장하여 누적가치 중 가장 큰 값을 dp에 저장하는 원리이다.

#아직도 잘 모르겠음

3. 한 번에 풀지 못 했다면 이유?
-------------------------------------------------------------------------*/

import java.io.IOException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

class Main{
  static int dp[][];
  public static void main(String[] args) throws IOException{
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));

    StringTokenizer st= new StringTokenizer(br.readLine()," ");
    int N=Integer.parseInt(st.nextToken());
    int K=Integer.parseInt(st.nextToken());

    dp=new int[N+1][K+1];

    int[] W=new int[N+1];
    int[] V=new int[N+1];

    for(int i=1;i<=N;i++){
      st=new StringTokenizer(br.readLine()," ");
      W[i]=Integer.parseInt(st.nextToken());
      V[i]=Integer.parseInt(st.nextToken());
    }
    for(int i=1;i<=N;i++){
      for(int j=1;j<=K;j++){
        dp[i][j]=dp[i-1][j];
        if(j-W[i]>=0){
          dp[i][j]=Math.max(dp[i-1][j],dp[i-1][j-W[i]]+V[i]);
        }
      }
    }
    bw.write(String.valueOf(dp[N][K]));
    bw.close();
  }
}
