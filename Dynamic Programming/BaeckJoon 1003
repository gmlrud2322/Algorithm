/*
1. 문제: 피보나치 함수
fibonacci(3)을 호출하면 다음과 같은 일이 일어난다.

-fibonacci(3)은 fibonacci(2)와 fibonacci(1) (첫 번째 호출)을 호출한다.
-fibonacci(2)는 fibonacci(1) (두 번째 호출)과 fibonacci(0)을 호출한다.
-두 번째 호출한 fibonacci(1)은 1을 출력하고 1을 리턴한다.
-fibonacci(0)은 0을 출력하고, 0을 리턴한다.
-fibonacci(2)는 fibonacci(1)과 fibonacci(0)의 결과를 얻고, 1을 리턴한다.
-첫 번째 호출한 fibonacci(1)은 1을 출력하고, 1을 리턴한다.
-fibonacci(3)은 fibonacci(2)와 fibonacci(1)의 결과를 얻고, 2를 리턴한다.

1은 2번 출력되고, 0은 1번 출력된다. N이 주어졌을 때, fibonacci(N)을 호출했을 때, 0과 1이 각각 몇 번 출력되는지 구하는 프로그램을 작성하시오.

입력) 첫째 줄에 테스트 케이스의 개수 T가 주어진다.
      각 테스트 케이스는 한 줄로 이루어져 있고, N이 주어진다. N은 40보다 작거나 같은 자연수 또는 0이다.
출력) 각 테스트 케이스마다 0이 출력되는 횟수와 1이 출력되는 횟수를 공백으로 구분해서 출력한다.

2. 풀이
각 수의 0의 갯수를 저장할 zero[]와 1의 갯수를 저장할 one[]을 만든다.
N이 0일 때와 1일 때는 각각 [1 0], [0 1]이지만 N의 수를 늘려 규칙을 찾아보면
zero[j]=zero[j-1]+zero[j-2]
one[j]=one[j-1]+one[j-2]
이라는 것을 알 수 있다.

3. 한 번에 풀지 못했다면 이유?
처음에 재귀함수를 사용해 풀었는데 재귀함수를 사용하면 무조건 시간초과가 발생한다.
그렇기 때문에 배열을 사용하여 해결하면 된다.
----------------------------------------------------------------------------------------*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.ArrayList;
class Main {

  public static void main(String[] args) throws IOException{
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    int T=Integer.parseInt(br.readLine());
    ArrayList<Integer> z=new ArrayList<Integer>();
    ArrayList<Integer> o=new ArrayList<Integer>();
    for(int i=0;i<T;i++){
      int N=Integer.parseInt(br.readLine());
      
      int[] zero=new int[41];
      int[] one=new int[41];
      zero[0]=1;
      zero[1]=0;
      one[0]=0;
      one[1]=1;
      for(int j=2;j<=N;j++){
        zero[j]=zero[j-1]+zero[j-2];
        one[j]=one[j-1]+one[j-2];
      }
      z.add(zero[N]);
      o.add(one[N]);
    }
    for(int i=0;i<z.size();i++){
      System.out.println(z.get(i)+" "+o.get(i));
    }
  }
}
