/*
1. 문제: 쉬운 계단 수
45656이란 수를 보자.
이 수는 인접한 모든 자리의 차이가 1이다. 이런 수를 계단 수라고 한다.
N이 주어질 때, 길이가 N인 계단 수가 총 몇 개 있는지 구해보자. 0으로 시작하는 수는 계단수가 아니다.

입력) 첫째 줄에 N이 주어진다. N은 1보다 크거나 같고, 100보다 작거나 같은 자연수이다.
출력) 첫째 줄에 정답을 1,000,000,000으로 나눈 나머지를 출력한다.

2. 풀이
dp를 이용하여 문제를 해결한다.
숫자에서 입력 받을 수 있는 수는 0~9까지 10개.
숫자의 길이(자릿수)를 나타내는 N을 입력받아 dp[N+1][10]를 만들어준다. 
  ->N+1인 이유는 한 자리 수부터 N까지를 볼 거기 때문.

dp의 규칙
   1) N번 째 자리 수(j)가 1부터 8인 경우는 j-1, j+1가 올 수 있다. 
      ->그렇기 때문에 dp[i][j]=dp[i-1][j-1]+dp[i-1][j+1] 인 점화식이 나온다.
   2) N번 째 자리 수(j) 0인 경우는 N-1 번째 수가 1인 경우 밖에 없다.
      ->그렇기 때문에 dp[i][j]=dp[i-1][1] 인 점화식이 나온다.
   3) N번 째 자리 수(j) 9인 경우는 N-1 번째 수가 8인 경우 밖에 없다.
      ->그렇기 때문에 dp[i][j]=dp[i-1][8] 인 점화식이 나온다.

*1,000,000,000으로 나눈 나머지 값을 출력하는 것이기 때문에 long타입으로 계산한다.

3. 한 번에 풀지 못 했다면 이유?
2차배열로 dp를 선언하여 설계하는 방법을 생각 못했다.
점화식을 찾는데에도 애를 먹었던 것 같다.
dp 문제를 다시 풀어볼 것!

----------------------------------------------------------------------*/

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;

class Main{
  
  public static void main(String[] args) throws IOException{
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
    final int mod=1000000000;
    int N=Integer.parseInt(br.readLine());//자릿수
    
    long[][] dp=new long[N+1][10];

    for(int i=0;i<10;i++){
      dp[1][i]=1;
    }
    for(int i=2;i<=N;i++){
      for(int j=0;j<10;j++){
        if(j==0){
          dp[i][j]=dp[i-1][1]%mod;
        }
        else if(j==9){
          dp[i][j]=dp[i-1][8]%mod;
        }
        else{
          dp[i][j]=(dp[i-1][j-1]+dp[i-1][j+1])%mod;
        }
      }
    }
    long result=0;
    for(int i=1;i<10;i++){
      result+=dp[N][i];
    }
    bw.write(String.valueOf(result%mod));
    bw.close();
  }
}
