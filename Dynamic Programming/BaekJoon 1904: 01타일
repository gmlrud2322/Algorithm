/*
1. 문제: 01타일
1 하나만으로 이루어진 타일 또는 0타일을 두 개 붙인 한 쌍의 00타일들이 있다.
예를 들어, N=1일 때 1만 만들 수 있고, N=2일 때는 00, 11을 만들 수 있다. (01, 10은 만들 수 없게 되었다.) 
또한 N=4일 때는 0011, 0000, 1001, 1100, 1111 등 총 5개의 2진 수열을 만들 수 있다.
우리의 목표는 N이 주어졌을 때 지원이가 만들 수 있는 모든 가짓수를 세는 것이다. 단 타일들은 무한히 많은 것으로 가정하자.

입력) 첫 번째 줄에 자연수 N이 주어진다. (1 ≤ N ≤ 1,000,000)
출력) 첫 번째 줄에 지원이가 만들 수 있는 길이가 N인 모든 2진 수열의 개수를 15746으로 나눈 나머지를 출력한다.

2. 풀이
DP를 활용한다. N의 증가에 따른 규칙을 찾아보면 dp[i]=dp[i-1]+dp[i-2]라는 것을 알 수 있다.
출력은 15746으로 나눈 나머지 수를 출력하는 것에 유의한다.

3. 한 번에 풀지 못했다면 이유?
단순히 결과를 15746으로 나누는 것으로는 원하는 결과를 얻을 수 없다.
숫자가 커지게되면 오버플로우가 발생하여 (-)값이 출력되기 때문이다.
이 문제를 해결하기 위해서는 모든 값에서 오버플로우가 발생하지 않도록 전부 15746으로 나눠줘야한다.

-----------------------------------------------------------------------*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;

class Main{
  static int[] dp;
  static int N;
  static final int a=15746;
  public static void main(String[] args) throws IOException {
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    N=Integer.parseInt(br.readLine());
    dp=new int[1000001];
    System.out.println(cnt());
  }
  public static int cnt(){
    dp[0]=1;
    dp[1]=1;
    
    for(int i=2;i<=N;i++){
      dp[i]=((dp[i-1]%a)+(dp[i-2]%a))%a;
    }
    return (dp[N]%15746);
  }
}
