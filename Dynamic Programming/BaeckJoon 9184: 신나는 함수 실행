/*
1. 문제: 신나는 함수 실행
 조건문 1) if a <= 0 or b <= 0 or c <= 0, then w(a, b, c) returns: 1

 조건문 2) if a > 20 or b > 20 or c > 20, then w(a, b, c) returns: w(20, 20, 20)

 조건문 3) if a < b and b < c, then w(a, b, c) returns: w(a, b, c-1) + w(a, b-1, c-1) - w(a, b-1, c)

 조건문 4) otherwise it returns: w(a-1, b, c) + w(a-1, b-1, c) + w(a-1, b, c-1) - w(a-1, b-1, c-1)

위의 함수를 구현하는 것은 매우 쉽다. 하지만, 그대로 구현하면 값을 구하는데 매우 오랜 시간이 걸린다. (예를 들면, a=15, b=15, c=15)
a, b, c가 주어졌을 때, w(a, b, c)를 출력하는 프로그램을 작성하시오.

입력) 입력은 세 정수 a, b, c로 이루어져 있으며, 한 줄에 하나씩 주어진다. 
     입력의 마지막은 -1 -1 -1로 나타내며, 세 정수가 모두 -1인 경우는 입력의 마지막을 제외하면 없다.
출력) 입력으로 주어진 각각의 a, b, c에 대해서, w(a, b, c)를 출력한다.
제한) -50 ≤ a, b, c ≤ 50

2. 풀이
입력 -1,-1,-1일 경우 실행시에 조건으로 따로 빼준다.
조건문 1) 과 조건문 2)에 의해 memoization에 활용될 조건은 0<a,b,c<=20 이 된다.
따라서, memoization에 활용할 dp[][][]배열의 크기는 각각 21이 된다.
문제에 주어진 대로 조건문을 작성하면 쉽게 결과를 도출할 수 있다.

3. 한 번에 풀지 못했다면 이유?
memoization의 개념을 처음 알았다.

***memoization이란?
-컴퓨터 프로그래밍이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써
동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술이다.
->동적 계획법의 핵심이 되는 기술.
->이미 구한 수는 배열에 저장해두고 다음 수를 구할 때 메모리에서 찾아 리턴하게 되면
  실행 속도를 O(n)까지 단축할 수 있다.
  
-----------------------------------------------------------------------------------*/

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
import java.io.IOException;
import java.util.ArrayList;
class Main{
  static int[][][] dp;
  public static void main(String[] args) throws IOException{
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st;
    ArrayList<Integer> arrA=new ArrayList<>();
    ArrayList<Integer> arrB=new ArrayList<>();
    ArrayList<Integer> arrC=new ArrayList<>();
    ArrayList<Integer> result=new ArrayList<>();

    dp=new int[21][21][21];
    while(true){
      st=new StringTokenizer(br.readLine()," ");
      int a=Integer.parseInt(st.nextToken());
      int b=Integer.parseInt(st.nextToken());
      int c=Integer.parseInt(st.nextToken());
      if(a==-1 && b==-1 && c==-1){
        break;
      }
      arrA.add(a);
      arrB.add(b);
      arrC.add(c);
      result.add(w(a,b,c));
    }
    for(int i=0;i<result.size();i++){
      System.out.printf("w(%d, %d, %d) = %d\n",arrA.get(i),arrB.get(i),arrC.get(i),result.get(i));
    }
  }
  public static int w(int a,int b, int c){
    if(a<=0||b<=0||c<=0){
      return 1;
    }
    if(a>20||b>20||c>20){
      return w(20,20,20);
    }
    if(dp[a][b][c]!=0){
      return dp[a][b][c];
    }
    if(a<b&&b<c){
      dp[a][b][c]=w(a,b,c-1)+w(a,b-1,c-1)-w(a,b-1,c);
      return dp[a][b][c];
    }
    dp[a][b][c]=w(a-1,b,c)+w(a-1,b-1,c)+w(a-1,b,c-1)-w(a-1,b-1,c-1);
    return dp[a][b][c];
  }
}
