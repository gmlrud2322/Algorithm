/*
1. 문제
  1번 수포자가 찍는 방식: 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, ...
  2번 수포자가 찍는 방식: 2, 1, 2, 3, 2, 4, 2, 5, 2, 1, 2, 3, 2, 4, 2, 5, ...
  3번 수포자가 찍는 방식: 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, 3, 3, 1, 1, 2, 2, 4, 4, 5, 5, ...
  1번 문제부터 마지막 문제까지의 정답이 순서대로 들은 배열 answers가 주어졌을 때, 
  가장 많은 문제를 맞힌 사람이 누구인지 배열에 담아 return 하도록 solution 함수를 작성해주세요.

answers	        return
[1,2,3,4,5]   	[1]
[1,3,2,4,2]   	[1,2,3]

2. 풀이
각각 method1(), method2(), method3()함수를 만들어 해당 규칙이 반복되는 수만큼 나눠준 값이
answers[]와 일치하면 count를 증가시키고 그 값을 return해준다.
3개의 return값을 받아 그 중 가장 큰 max 값과 일치하면 ArrayList에 넣고 정렬해주는 방식이다.

3. 한 번에 풀지 못했다면 이유?
풀었지만 효율적이지 못하게 굉장히 길게 코드를 작성했다. 
일일이 if문을 사용할 필요없이 규칙을 배열에 넣어 작성하면 됐는데 비효율적이게 코드를 짰다.
max를 구하는 과정에서 Math.max()함수를 사용했으면 한줄에 끝날 것을  for문을 사용해 길게 짰다.

import java.util.ArrayList;
class Solution {
    public int[] solution(int[] answer) {
        int[] a = {1, 2, 3, 4, 5};
        int[] b = {2, 1, 2, 3, 2, 4, 2, 5};
        int[] c = {3, 3, 1, 1, 2, 2, 4, 4, 5, 5};
        int[] score = new int[3];
        for(int i=0; i<answer.length; i++) {
            if(answer[i] == a[i%a.length]) {score[0]++;}
            if(answer[i] == b[i%b.length]) {score[1]++;}
            if(answer[i] == c[i%c.length]) {score[2]++;}
        }
        int maxScore = Math.max(score[0], Math.max(score[1], score[2]));
        ArrayList<Integer> list = new ArrayList<>();
        if(maxScore == score[0]) {list.add(1);}
        if(maxScore == score[1]) {list.add(2);}
        if(maxScore == score[2]) {list.add(3);}
        return list.stream().mapToInt(i->i.intValue()).toArray();
    }
} //다른 사람 코드

------------------------------------------------------------------------------*/

import java.util.*;
class Solution {
    public int[] solution(int[] answers) {
        int[] answer = {};
        int[] result=new int[3];
        result[0]=method1(answers);
        result[1]=method2(answers);
        result[2]=method3(answers);
        
        ArrayList<Integer> arr=new ArrayList();
        int max=-1;
        for(int i=0;i<result.length;i++){
            if(result[i]>=max)
                max=result[i];
        }
        for(int i=0;i<result.length;i++){
            if(max==result[i]){
                arr.add(i+1);
            }
        }
        Collections.sort(arr);
        
        answer=new int[arr.size()];
        for(int i=0;i<arr.size();i++){
            
            answer[i]=arr.get(i);
        }
        return answer;
    }
    public int method1(int[] answers){
        int count=0;
        for(int i=0;i<answers.length;i++){
            int n=(i+1)%5;
            if(n==1&&(answers[i]==1)){
                count++;
            }if(n==2&&(answers[i]==2)){
                count++;
            }if(n==3&&(answers[i]==3)){
                count++;
            }if(n==4&&(answers[i]==4)){
                count++;
            }if(n==0&&(answers[i]==5)){
                count++;
            }
        } return count;
    }
    public int method2(int[] answers){
        int count=0;
        for(int i=0;i<answers.length;i++){
           
            if(i%2==0){
                if(answers[i]==2)
                    count++;
            }else{
                if((i%8==1)&&(answers[i]==1))
                    count++;
                if((i%8==3)&&(answers[i]==3))
                    count++;
                if((i%8==5)&&(answers[i]==4))
                    count++;
                if((i%8==7)&&(answers[i]==5))
                    count++;
            }
           
        } return count;
    }
    public int method3(int[] answers){
        int count=0;
        for(int i=0;i<answers.length;i++){
            int n=i%10;
            if((n<2)&&(answers[i]==3)){
                count++;
            }else if((n>=2&&n<4)&&(answers[i]==1)){
                count++;
            }else if((n>=4&&n<6)&&(answers[i]==2)){
                count++;
            }else if((n>=6&&n<8)&&(answers[i]==4)){
                count++;
            }else if((n>=8&&n<10)&&(answers[i]==5)){
                count++;
            }
        } return count;
    }
}
