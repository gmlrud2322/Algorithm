/*
1. 문제: 최대 힙
널리 잘 알려진 자료구조 중 최대 힙이 있다. 
최대 힙을 이용하여 다음과 같은 연산을 지원하는 프로그램을 작성하시오.
  1)배열에 자연수 x를 넣는다.
  2)배열에서 가장 큰 값을 출력하고, 그 값을 배열에서 제거한다.
프로그램은 처음에 비어있는 배열에서 시작하게 된다.

입력) 첫째 줄에 연산의 개수 N(1 ≤ N ≤ 100,000)이 주어진다. 
      다음 N개의 줄에는 연산에 대한 정보를 나타내는 정수 x가 주어진다. 
      만약 x가 자연수라면 배열에 x라는 값을 넣는(추가하는) 연산이고, x가 0이라면 배열에서 가장 큰 값을 출력하고 
      그 값을 배열에서 제거하는 경우이다. 입력되는 자연수는 2^31보다 작다.
출력) 입력에서 0이 주어진 회수만큼 답을 출력한다. 
      만약 배열이 비어 있는 경우인데 가장 큰 값을 출력하라고 한 경우에는 0을 출력하면 된다.
      
2. 풀이
priority queue를 사용하지않고 직접 max heap을 구현해보기로 했다.
list에 입력할 때와 출력할 때를 나눠 함수를 만들어준다.
입력할 때는 최대힙의 원리에 따라 입력된 자식노드값이 부모노드보다 클 경우 스왑해줘서 제일 큰 값이 maxHeap(0)에 있도록 한다.
출력할 때는 제일 큰 값이 저장되어 있는 maxHeap(0)을 출력하고 제거한 다음 트리의 가장 끝에 값을 꼭대기로 올려준다.
그 후 꼭대기에서부터 내려오면서 자식노드와 비교하여 큰 자식 노드와 스왑해준다.
-> 가장 큰수가 꼭대기로 올라가게 된다.

3. 한 번에 풀지 못했다면 이유?
입력할 때 입력값을 비교하여 올려주는 것은 생각했는데 
출력할 때 마지막 노드를 꼭대기로 올려서 자식노드와 비교하는 과정을 생각못했다.
이제 알았으니 잊지않도록 해야겠다.

----------------------------------------------------------------------------------------*/
import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.util.ArrayList;

class Main{
  static ArrayList<Integer> maxHeap;
  public static void main(String[] args) throws IOException{

    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
    int x=Integer.parseInt(br.readLine());
    maxHeap=new ArrayList<>();
    ArrayList<Integer> result=new ArrayList<>();

    for(int i=0;i<x;i++){
      int input=Integer.parseInt(br.readLine());
      if(input==0){
        result.add(delete());
      }
      else{
        insert(input);
      }
    }
    for(int i=0;i<result.size();i++){
      bw.write(String.valueOf(result.get(i))+"\n");
    }
    bw.close();
  }
  public static void insert(int input){
    maxHeap.add(input);
    int k=maxHeap.size()-1;//자식노드
    int p=0;
    while(k>0){
      p=(k-1)/2;//부모노드
      if(maxHeap.get(k)>maxHeap.get(p)){
        int temp=maxHeap.get(k);
        maxHeap.set(k, maxHeap.get(p));
        maxHeap.set(p,temp);
        k=p;
        }
        else{
          break;
        }
      }
  }
  public static int delete(){
    if(maxHeap.isEmpty()){
      return 0;
    }
    int result=maxHeap.get(0);
    maxHeap.set(0,maxHeap.get(maxHeap.size()-1));
    maxHeap.remove(maxHeap.size()-1);

    int p=0;//부모노드
    while((p*2)<maxHeap.size()-1){
    int max=maxHeap.get(p*2+1);//왼쪽 자식노드
    int maxIndex=p*2+1;

    if(((p*2+2)<maxHeap.size())&&(max<maxHeap.get(p*2+2))){
      max=maxHeap.get(p*2+2);//오른쪽 자식노드
      maxIndex=p*2+2;
    }
    if(maxHeap.get(p)>max){
      break;
    }
    int temp=maxHeap.get(p);
    maxHeap.set(p,maxHeap.get(maxIndex));
    maxHeap.set(maxIndex, temp);
    p=maxIndex;
    }
    return result;
  }
}
