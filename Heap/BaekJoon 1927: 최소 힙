/*
1. 문제: 최소 힙
널리 잘 알려진 자료구조 중 최소 힙이 있다. 최소 힙을 이용하여 다음과 같은 연산을 지원하는 프로그램을 작성하시오.
  1)배열에 자연수 x를 넣는다.
  2)배열에서 가장 작은 값을 출력하고, 그 값을 배열에서 제거한다.
프로그램은 처음에 비어있는 배열에서 시작하게 된다.

입력) 첫째 줄에 연산의 개수 N(1 ≤ N ≤ 100,000)이 주어진다. 
      다음 N개의 줄에는 연산에 대한 정보를 나타내는 정수 x가 주어진다. 
      만약 x가 자연수라면 배열에 x라는 값을 넣는(추가하는) 연산이고, 
      x가 0이라면 배열에서 가장 작은 값을 출력하고 그 값을 배열에서 제거하는 경우이다. 
      입력되는 자연수는 231보다 작으며, 음의 정수는 입력으로 주어지지 않는다.
출력) 입력에서 0이 주어진 회수만큼 답을 출력한다. 
      만약 배열이 비어 있는 경우인데 가장 작은 값을 출력하라고 한 경우에는 0을 출력하면 된다.
      
2. 풀이
최소힙의 원리를 이용하여 해결한다.
입력할 때 자식노드(트리의 마지막 노드)가 부모노드의 크기보다 작으면 스왑하여 list에 저장한다.
출력할 때 list가 비어있는 경우는 0을 출력한다.
나머지 경우는 list의 0번째 원소는 가장 작은 값이므로 결과 list에 추가한다.
0번째와 마지막 노드를 스왑해준뒤 마지막 노드를 삭제한다.
0번째 노드에서부터 작은 값과 비교하여 밑라인이 없을 때까지, 더 이상 작은값이 없을때까지 스왑한다.

3. 한 번에 풀지 못했다면 이유?
-------------------------------------------------------------------------------*/

import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;
import java.util.ArrayList;

class Main{
  static ArrayList<Long> minHeap;
  public static void main(String[] args) throws IOException{

    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
    int x=Integer.parseInt(br.readLine());
    minHeap=new ArrayList<>();
    ArrayList<Long> result=new ArrayList<>();

    for(int i=0;i<x;i++){
      long input=Long.parseLong(br.readLine());
      if(input==0){
        result.add(delete());
      }
      else{
        insert(input);
      }
    }
    for(int i=0;i<result.size();i++){
      bw.write(result.get(i).toString()+"\n");
    }
    bw.close();
  }

  public static void insert(long input){
    minHeap.add(input);
    int k=minHeap.size()-1;//자식노드
    
      while(k>0){
        int p=(k-1)/2;//부모노드
        if(minHeap.get(k)<minHeap.get(p)){
          long temp=minHeap.get(k);
          minHeap.set(k,minHeap.get(p));
          minHeap.set(p,temp);
        }
        else{
          break;
        }
        k=p;
      }
    
  }
  public static long delete(){
    if(minHeap.isEmpty()){
      return 0;
    }
    
      long result=minHeap.get(0);//가장 작은 값
      minHeap.set(0,minHeap.get(minHeap.size()-1));
      minHeap.remove(minHeap.size()-1);

      int p=0;//꼭대기 노드
      while((p*2)<minHeap.size()-1){
        long min=minHeap.get(p*2+1);//왼쪽 자식 노드
        int minIndex=p*2+1;

        if((p*2+2)<minHeap.size()&&min>minHeap.get(p*2+2)){//오른쪽 자식노드가 존재하는데 작은 값일 때
          min=minHeap.get(p*2+2);
          minIndex=p*2+2;
        }
        if(minHeap.get(p)<min){
          break;
        }
  
          minHeap.set(minIndex,minHeap.get(p));
          minHeap.set(p,min);
          p=minIndex;
        
      }
      return result;    
  }
}
