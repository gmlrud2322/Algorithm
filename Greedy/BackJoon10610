/*1. 문제
어느 날, 미르코는 우연히 길거리에서 양수 N을 보았다. 미르코는 30이란 수를 존경하기 때문에, 그는 길거리에서 찾은 수에 포함된 숫자들을 섞어 30의 배수가 되는 가장 큰 수를 만들고 싶어한다.
미르코를 도와 그가 만들고 싶어하는 수를 계산하는 프로그램을 작성하라.

*조건
1) 입력: N을 입력받는다. N는 최대 105개의 숫자로 구성되어 있으며, 0으로 시작하지 않는다. 
2) 출력: 미르코가 만들고 싶어하는 수가 존재한다면 그 수를 출력하라. 그 수가 존재하지 않는다면, -1을 출력하라.

2. 풀이
임의의 수 N을 입력 받는다. 이 때 조건 1에 따라 표현범위 가능한 변수 String으로 입력받는다
30의 배수이기 위해서는 3과 10의 배수이여야 한다.
->0이 하나 이상 필요, 각 자리의 숫자 합은 3의 배수여야 한다.
->해당되지 않는 경우 -1 출력.
->각 자리 숫자 0~9까지의 개수를 배열 num[]에 저장한다.
이 때, num[]은 int형 배열, 숫자를 입력 받은 N은 String이므로 substring을 이용하여 한자리씩 쪼갠다.

3. 한번에 풀지 못했다면 이유?
처음에 N을 int형으로 받아서 배열에 넣고 결과를 Arrays.sort를 이용하여 출력하였다.
숫자가 크지 않은 경우는 실행되지만 숫자가 커지면 런타임 에러 발생.
런타임 에러- 자료형보다 큰 수가 들어가면 발생할 수 있다.
조건 1 10^5개를 만족하기 위해서 String 자료형을 사용하였다.

-------------------------------------------------------------------------------------------------*/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Scanner;

public class Main {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		Scanner scan = new Scanner(System.in);
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		String N = br.readLine();
		int[] num = new int[10];
		int n = 0;
		int sum = 0;
		for (int i = 0; i < N.length(); i++) {
			n = Integer.parseInt(N.substring(i, i + 1));
			num[n] += 1;
			sum += n;
		}
		if ((num[0] == 0) || (sum % 3 != 0)) {
			System.out.println(-1);
		} else {
			for (int i = num.length - 1; i >= 0; i--) {
				for (int j = 0; j < num[i]; j++) {
					System.out.print(i);
				}
			}
		}

	}
}
