/*
1. 문제
길이가 N인 수열을 입력받는다.
예를 들면, 어떤 수열이 {0, 1, 2, 4, 3, 5}일 때, 그냥 이 수열의 합을 구하면 0+1+2+4+3+5 = 15이다. 
하지만, 2와 3을 묶고, 4와 5를 묶게 되면, 0+1+(2*3)+(4*5) = 27이 되어 최대가 된다.
수열의 모든 수는 단 한번만 묶거나, 아니면 묶지 않아야한다.
합이 최대가 되게 하는 프로그램을 작성하시오.

조건 1) 첫째 줄에 수열 크기 N이 주어진다. (N<10000 자연수)
     2) 둘째 줄부터 N개의 줄에, 수열의 각 수 입력. (-10000<=수열의 수<=10000 정수)

2. 풀이
1)음수의 경우에는 음수가 짝수개이면 작은 수 부터 차례로 곱한 값의 합이 최대.
2)음수가 홀수개이면 0이 존재할 때 두개씩 짝지어 곱하고 남은 수와 0을 곱하고,
 0이 없을 때는 그대로 더할때가 최대.
3)양수의 경우 1은 그대로 더할때가 최대.
3)양수도 가장 큰수부터 차례로 두개씩 곱하고 남는 수는 더했을 때가 최대.

3. 한번에 풀지 못했다면 이유?
반례를 미리 찾아보지 않았다면 틀렸다.
다양한 반례를 생각하려는 노력을 해야할 것 같다.
--------------------------------------------------------------------------------------------*/


import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub

		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine(), " ");

		int N = Integer.parseInt(st.nextToken());
		int negCnt = 0;
		int posCnt = 0;
		int zeroCnt = 0;
		int oneCnt = 0;

		int[] num = new int[N];
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			num[i] = Integer.parseInt(st.nextToken());
			if (num[i] < 0) {
				negCnt += 1;
			} else if (num[i] > 1) {
				posCnt += 1;
			} else if (num[i] == 1) {
				oneCnt += 1;
			} else {
				zeroCnt += 1;
			}
		}
		Arrays.sort(num);
		int neg_i = -1; // 음수가 저장된 배열 번호
		int pos_i = -1; // 1보다 큰 양수가 저장된 배열 번호
		for (int i = 0; i < N; i++) {
			if (num[i] < 0)
				neg_i = i;
			if (num[i] > 1) {
				pos_i = i;
				break;
			}
		}

		int sum = 0;
		if (negCnt > 1) {
			if (negCnt % 2 == 0) {
				for (int i = 0; i <= neg_i; i = i + 2) {
					sum += num[i] * num[i + 1];
				}
			} else {
				for (int i = 0; i <= (neg_i - 1); i = i + 2) {
					sum += num[i] * num[i + 1];
				}
				if (zeroCnt > 0) {
					zeroCnt -= 1;
					sum += (num[neg_i] * 0);
				} else {
					sum += num[neg_i];
				}
			}
		} else {
			if (negCnt == 1) {
				if (zeroCnt > 0) {
					zeroCnt -= 1;
					sum += (num[0] * 0);
				} else {
					sum += num[0];
				}
			}
		}
		if (posCnt > 1) {
			if (posCnt % 2 == 0) {
				for (int i = pos_i; i < N; i = i + 2) {
					sum += num[i] * num[i + 1];
				}
			} else {

				for (int i = N - 1; i > pos_i; i = i - 2) {
					sum += num[i] * num[i - 1];
				}

				sum += num[pos_i];
			}
		} else {
			if (posCnt == 1) {
				sum += num[pos_i];
			}
		}

		sum += oneCnt;

		System.out.println(sum);
	}
}
