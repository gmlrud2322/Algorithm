/*
1. 문제: 균형잡힌 세상
모든 왼쪽 소괄호("(")는 오른쪽 소괄호(")")와만 짝을 이뤄야 한다.
모든 왼쪽 대괄호("[")는 오른쪽 대괄호("]")와만 짝을 이뤄야 한다.
모든 오른쪽 괄호들은 자신과 짝을 이룰 수 있는 왼쪽 괄호가 존재한다.
모든 괄호들의 짝은 1:1 매칭만 가능하다. 즉, 괄호 하나가 둘 이상의 괄호와 짝지어지지 않는다.
짝을 이루는 두 괄호가 있을 때, 그 사이에 있는 문자열도 균형이 잡혀야 한다.

입력) 하나 또는 여러줄에 걸쳐서 문자열이 주어진다. 
      각 문자열은 영문 알파벳, 공백, 소괄호("( )") 대괄호("[ ]")등으로 이루어져 있으며, 
      길이는 100글자보다 작거나 같다.
      입력의 종료조건으로 맨 마지막에 점 하나(".")가 들어온다.
출력) 각 줄마다 해당 문자열이 균형을 이루고 있으면 "yes"를, 아니면 "no"를 출력한다.

2. 풀이
Stack을 이용하면 쉽게 풀 수 있다. 먼저, String으로 받은 문자열을 toCharArray()를 사용해
char형으로 변환해준다. (,[ 입력시에는 push(), ],)입력시에는 pop()을 해주면 된다.
이 때, ([)]와 같은 경우는 "no"가 출력돼야하므로 무조건 pop()을 해주는 것이 아니라
peek값이 해당 짝이 맞는지를 확인한 뒤, 맞으면 pop() 아니면 "no"를 return해준다.

3. 한 번에 풀지 못했다면 이유?
반례 ([)]의 경우를 생각 못했다.
-------------------------------------------------------------------------------*/

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.util.Stack;

class Main{

  public static void main(String[] args) throws IOException{
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
    
    while(true){
      String input=br.readLine();
      if(input.equals(".")){
        bw.flush();
        return;
      }
      
      System.out.println(balance(input));
    }
  }
  public static String balance(String input){
    Stack<Integer> stack=new Stack<Integer>();
    
    char[] charArr=input.toCharArray();    
    
    for(int i=0;i<charArr.length;i++){
      int k=charArr[i];
      if(k=='['){
        stack.push(1);
      }
      if(k==']'){
        if(stack.isEmpty()==true){
          return "no";
        }
        if(stack.peek()==1){
          stack.pop();
        }
        else{
          return "no";
        }
      }
      if(k=='('){
        stack.push(-1);
      }
      if(k==')'){
        if(stack.isEmpty()==true){
          return "no";
        }
        else{
          if(stack.peek()==-1){
            stack.pop();
          }
          else{
            return "no";
          }
        }
      }
    }
    if(!stack.isEmpty()){
      return "no";
    }
    else{
      return "yes";
    }
  }
}
