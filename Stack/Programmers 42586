/*
1. 문제
기능은 진도가 100%일 때 서비스반영.
개발속도는 모두 다르기 때문에 뒤에 있는 기능이 앞에 있는 기능보다 먼저 개발될 수 있다. 
이때 뒤에 있는 기능은 앞에 있는 기능이 배포될 때 함께 배포됩니다.
먼저 배포되어야 하는 순서대로 작업의 진도가 적힌 정수 배열 progresses와 각 작업의 개발 속도가 적힌 
정수 배열 speeds가 주어질 때 각 배포마다 몇 개의 기능이 배포되는지를 return 하도록 solution 함수를 완성하세요.

2. 풀이
progresses+speed*(기간)>=100 이어야 한다.
각 기능에 대한 작업일의 값을 queue에 넣어준다.
queue의 프로세스는 FIFO 이므로 먼저 뺀 값이 뒤에 나올 값보다 크면 같이 배포가 된다는 것을 염두한다.
배포되는 기능의 수를 배열 answer에 넣어주기 위해 ArrayList에 쌓아준 뒤 그 크기만큼 배열을 설정한다.

3. 한 번에 풀지 못했다면 이유?
stack과 queue에 대한 이해 부족 + 크기가 정해지지 않은 answer[] 때문에 일어나는 오류

-----------------------------------------------------------------------------------------------*/

import java.util.*;
class Solution {
    public int[] solution(int[] progresses, int[] speeds) {
        int[] answer = {};
        
        
        Queue<Integer> q= new LinkedList<Integer>();
        ArrayList<Integer> arr=new ArrayList<Integer>();
        for(int i=0;i<progresses.length;i++){
            int k=0;
            k=((100-progresses[i])/speeds[i])+((100-progresses[i])%speeds[i]==0?0:1);
            q.add(k);
        }
        int count=1;
        int qPoll=0;
        qPoll=q.poll();
        while(!q.isEmpty()){
            int k=q.poll();
            if(qPoll>=k){
                count+=1;
            }else{
                arr.add(count);
                count=1;
                qPoll=k;
            }
        }
       arr.add(count);
        answer=new int[arr.size()];
        for(int i=0;i<arr.size();i++){
            answer[i]=arr.get(i);
        }
        return answer;
    }
}
