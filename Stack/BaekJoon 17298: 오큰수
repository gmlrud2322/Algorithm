/*
1. 문제: 오큰수
크기가 N인 수열 A = A1, A2, ..., AN이 있다. 수열의 각 원소 Ai에 대해서 오큰수 NGE(i)를 구하려고 한다. 
Ai의 오큰수는 오른쪽에 있으면서 Ai보다 큰 수 중에서 가장 왼쪽에 있는 수를 의미한다. 그러한 수가 없는 경우에 오큰수는 -1이다.
예를 들어, A = [3, 5, 2, 7]인 경우 NGE(1) = 5, NGE(2) = 7, NGE(3) = 7, NGE(4) = -1이다. 
A = [9, 5, 4, 8]인 경우에는 NGE(1) = -1, NGE(2) = 8, NGE(3) = 8, NGE(4) = -1이다.

입력) 첫째 줄에 수열 A의 크기 N (1 ≤ N ≤ 1,000,000)이 주어진다. 
      둘째 줄에 수열 A의 원소 A1, A2, ..., AN (1 ≤ Ai ≤ 1,000,000)이 주어진다.
출력) 총 N개의 수 NGE(1), NGE(2), ..., NGE(N)을 공백으로 구분해 출력한다.

2. 풀이
입력값들을 저장한 A배열을 뒤에서부터 값을 비교한다. 
오른쪽에 있으면서 큰 수 중 가장 왼쪽에 있는 수는 결국, A[k]보다 뒤에 있는 작은 값들은 쓸 일이 없다.
그렇기 때문에 stack에 뒤의 값을 쌓아준 뒤, peek()값보다 A[i]가 크다면 pop()하여 보다 큰 수가 있는지 찾고,
없으면 -1을 저장한다.
peek()값보다 A[i]가 작다면 peek()값이 NGE값이 된다.

3. 한 번에 풀지 못했다면 이유?
시간초과로 통과하지 못했다. 사실 지금도 시간복잡도 개념을 잘 모르겠다.
또한 처음 작성한 코드는 거의 유사한 내용이지만 while문 안에 for문을 넣어서 작성했다.
아마도 최악의 경우에는 for문을 다 돌면서 while문을 돌기 때문에 O(n^2)이였던 것 같다.
그리고 다시 작성한 코드는 while문을 통해 결국 작은 값들은 pop해서 지워지기 때문에
조건에 맞는 오큰수를 peek값으로 구할 수 있는 것 같다. 그래서 아마 O(n)인것 같다.

----------------------------------------------------------------------------------------------*/

import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Stack;
import java.util.StringTokenizer;
import java.io.BufferedWriter;
import java.io.OutputStreamWriter;

class Main{
  public static void main(String[] args) throws IOException{
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));
   
    Stack<Integer> stack=new Stack<Integer>();
    
    int N=Integer.parseInt(br.readLine());
    StringTokenizer st=new StringTokenizer(br.readLine()," ");
    int[] A=new int[N+1];
    int[] result=new int[N+1];
    for(int i=1;i<=N;i++){
      A[i]=Integer.parseInt(st.nextToken());
    }
    for(int i=N;i>=1;i--){
      while(!stack.isEmpty()&&stack.peek()<=A[i]){
        stack.pop();
      }
      if(stack.isEmpty()){
        result[i]=-1;
      }
      else{
        result[i]=stack.peek();
      }
      stack.push(A[i]);
    }
    for(int i=1;i<=N;i++){
      bw.write(result[i]+" ");
    }
    bw.flush();
  }
}
