/*
1. 문제
어느 날 1번 컴퓨터가 웜 바이러스에 걸렸다. 컴퓨터의 수와 네트워크 상에서 서로 연결되어 있는 정보가 주어질 때, 
1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 출력하는 프로그램을 작성하시오.

입력
첫째 줄에는 컴퓨터의 수가 주어진다. 컴퓨터의 수는 100 이하이고 각 컴퓨터에는 1번 부터 차례대로 번호가 매겨진다. 
둘째 줄에는 네트워크 상에서 직접 연결되어 있는 컴퓨터 쌍의 수가 주어진다. 
이어서 그 수만큼 한 줄에 한 쌍씩 네트워크 상에서 직접 연결되어 있는 컴퓨터의 번호 쌍이 주어진다.

출력
1번 컴퓨터가 웜 바이러스에 걸렸을 때, 
1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 첫째 줄에 출력한다.

입력          |  출력   
7             |  4
6             |
1 2           |
2 3           |
1 5           |
5 2           |
5 6           |
4 7           |

2. 풀이 
dfs 또는 bfs를 사용하여 1번 정점과 연결된 정점의 수를 count하여 출력한다.

3. 한 번에 풀지 못했다면 이유?
---------------------------------------------------------------------------------------------*/
import java.util.Scanner;
import java.util.Stack;
public class Main{
		static int point;
		static int lineNum;
		static int[][] line;
		static boolean[] check;
		static int count=0;
	public static void main(String[] args) {
		
		Scanner scan=new Scanner(System.in);
		point=scan.nextInt();
		lineNum=scan.nextInt();
		line=new int[101][101];
		check=new boolean[101];
		for(int i=0;i<lineNum;i++) {
			int x=scan.nextInt();
			int y=scan.nextInt();
			
			line[x][y]=line[y][x]=1;
		}
		dfs(1);
		System.out.println(count);
		
		
	}
	public static void dfs(int k) {
		Stack<Integer> stack =new Stack<Integer>();
		stack.push(k);
		check[k]=true;
		while(!stack.isEmpty()) {
			stack.pop();
			for(int i=1;i<=point;i++) {
				if(line[k][i]==1&&check[i]==false) {
					check[i]=true;
					count++;
					stack.push(i);
					dfs(i);
				}
			}
		}		
	}
}
