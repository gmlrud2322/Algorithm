/*
1. 문제
그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 
단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 
더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.

입력
첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 
다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 
입력으로 주어지는 간선은 양방향이다.

출력
첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. 
V부터 방문된 점을 순서대로 출력하면 된다.

4 5 1                  |
1 2                    |
1 3                    |   1 2 4 3
1 4                    |   1 2 3 4
2 4                    |
3 4                    |

2. 풀이
DFS는 stack(LIFO), BFS는 queue(FIFO)와 관련이 있다.
지나간 점을 확인해주는 check[]. lin[][]은 정사각형의 2차배열을 만들어준다 [1 2]와 [2 1]은 같은 간선으로 양방향이기 때문이다.
결국 간선인지와 지나간 점이 아닌 두 경우에 속할 때 stack에 쌓아주도록 하는 방식이다.

3. 한 번에 풀지 못했다면 이유?
queue는 바로 할 수 있었지만 stack은 지금도 조금 헷갈린다. 스택을 사용하는 방법과 재귀를 사용하는 방법이 있다고 그랬는데
결국 두 가지를 모두 사용해서 풀었다. 조금 더 알아봐야 할 것 같다.
stack에서 해당 정점에 연결된 모든 점들을 push하고 peek값을 pop한뒤 그 해당 값에 또 연결된 점들을 push해주는 반복과정이라고 이해했는데
다른 사람의 코드를 보니 아니였다. 

------------------------------------------------------------------------*/
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Stack;

public class Main{
	static int N;
	static int M;
	static int V;
	static int[][] line;
	static boolean[] check;
	
	public static void main(String[] args) {
		
		Scanner scan=new Scanner(System.in);
		N=scan.nextInt();
		M=scan.nextInt();
		V=scan.nextInt();
		line=new int[1001][1001];
		check=new boolean[1001];
		for(int i=0;i<M;i++) {
			int x=scan.nextInt();
			int y=scan.nextInt();
			line[x][y]=line[y][x]=1;
		}
		dfs(V);
		check=new boolean[1001];
		System.out.println("");
		bfs();
	}
	
	public static void dfs(int V){
		Stack<Integer> stack=new Stack<Integer>();
		stack.push(V);
		check[V]=true;
		System.out.print(V+" ");
		while(!stack.isEmpty()){
			int k=stack.pop();
			
			for(int i=1;i<=N;i++) {
				if(line[k][i]==1&&check[i]==false) {
					check[i]=true;
					stack.push(i);
					dfs(i);
				}
			}
		}	return;
	}
	public static void bfs(){
		Queue<Integer> queue=new LinkedList<Integer>();
		queue.add(V);
		check[V]=true;
		
		while(!queue.isEmpty()) {
			int k=queue.poll();
			System.out.print(k+" ");
			for(int i=1;i<=N;i++) {
				if(line[k][i]==1&&check[i]==false) {
					check[i]=true;
					queue.add(i);
				}
			}
		}return;
	}
}
