/*
1. 문제: 토마토
입력) 첫 줄에는 상자의 크기를 나타내는 두 정수 M,N이 주어진다. M은 상자의 가로 칸의 수, N은 상자의 세로 칸의 수를 나타낸다. 
단, 2 ≤ M,N ≤ 1,000 이다. 둘째 줄부터는 하나의 상자에 저장된 토마토들의 정보가 주어진다. 
즉, 둘째 줄부터 N개의 줄에는 상자에 담긴 토마토의 정보가 주어진다. 
하나의 줄에는 상자 가로줄에 들어있는 토마토의 상태가 M개의 정수로 주어진다. 
정수 1은 익은 토마토, 정수 0은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸을 나타낸다.
토마토가 하나 이상 있는 경우만 입력으로 주어진다.

출력)여러분은 토마토가 모두 익을 때까지의 최소 날짜를 출력해야 한다. 
    만약, 저장될 때부터 모든 토마토가 익어있는 상태이면 0을 출력해야 하고, 
    토마토가 모두 익지는 못하는 상황이면 -1을 출력해야 한다.
    
2. 풀이
tom[][]이라는 배열에 토마토를 입력받은 값을 저장한다.
객채 Tomato class를 만들어 x, y 좌표를 저장한다.
Tomato형 Queue q를 만들어서 먼저 익은 토마토가 있는 칸의 좌표를 전부 q에 넣어준다.
익은 토마토가 들어있는 칸의 상하좌우로 범위안에 해당하고 익지않은 토마토가 들어있는 칸에 +1을 해주고 그 값을 또 q에 넣어준다.
익지않은 토마토가 들어있는 칸이 있다면 결과는 -1, 아니라면 그 중 가장 큰 값을 출력한다.

3. 한 번에 풀지 못 했다면 이유?
답지의 도움을 받았다...

------------------------------------------------------------------------------*/

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.Queue;
import java.util.LinkedList;

class Tomato{
  int x;
  int y;
  Tomato(int x, int y){
    this.x=x;
    this.y=y;
  }
}

public class Main {
  static int[][] tom;
  static int M, N;
  static int[] dx={-1,1,0,0};
  static int[] dy={0,0,-1,1};
  static int result;
  

	public static void main(String[] args) throws IOException{
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));

    StringTokenizer st=new StringTokenizer(br.readLine());
    M=Integer.parseInt(st.nextToken());
    N=Integer.parseInt(st.nextToken());
    tom=new int[N][M];
  
    for(int i=0;i<N;i++){
      st=new StringTokenizer(br.readLine());
      for(int j=0;j<M;j++){
        tom[i][j]=Integer.parseInt(st.nextToken());
      }
    }
    bfs();

    bw.write(String.valueOf(result));
    bw.close();
	}
  static void bfs(){
    Queue<Tomato> q=new LinkedList<Tomato>();
    
    for(int i=0;i<N;i++){
      for(int j=0;j<M;j++){
        if(tom[i][j]==1){
          q.add(new Tomato(i,j));
        }
      }
    }//익은 토마토가 있는 곳을 전부 q에 넣는다.

    while(!q.isEmpty()){
      Tomato t=q.poll();

      for(int i=0;i<4;i++){
          int X=t.x+dx[i];
          int Y=t.y+dy[i];

          if(X<0||Y<0||X>=N||Y>=M){
            continue;
          }
          if(tom[X][Y]!=0){
            continue;
          }

          tom[X][Y]=tom[t.x][t.y]+1;
          q.add(new Tomato(X,Y));
      } 
    }
    int max=0;
      for(int i=0;i<N;i++){
        for(int j=0;j<M;j++){
          if(tom[i][j]==0){
            result=-1;
            return ;
          }
          max=Math.max(max,tom[i][j]);
        }
      }
      result= max-1;
  }
}
