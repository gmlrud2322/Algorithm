/*
1. 문제: 유기농 배추
한나가 배추를 재배하는 땅은 고르지 못해서 배추를 군데군데 심어 놓았다. 
배추들이 모여있는 곳에는 배추흰지렁이가 한 마리만 있으면 되므로 
서로 인접해있는 배추들이 몇 군데에 퍼져있는지 조사하면 총 몇 마리의 지렁이가 필요한지 알 수 있다. 
0은 배추가 심어져 있지 않은 땅이고, 1은 배추가 심어져 있는 땅을 나타낸다.

입력) 입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 
     그 다음 줄부터 각각의 테스트 케이스에 대해 첫째 줄에는 배추를 심은 배추밭의 가로길이 M(1 ≤ M ≤ 50)과 세로길이 N(1 ≤ N ≤ 50), 
     그리고 배추가 심어져 있는 위치의 개수 K(1 ≤ K ≤ 2500)이 주어진다. 
     그 다음 K줄에는 배추의 위치 X(0 ≤ X ≤ M-1), Y(0 ≤ Y ≤ N-1)가 주어진다. 두 배추의 위치가 같은 경우는 없다.
     
출력) 각 테스트 케이스에 대해 필요하 최소의 배추흰지렁이 마리 수 출력.

2. 풀이
BFS(Queue)를 사용하여 풀었다.
기본 BFS와 다를 것이 없지만 테스트 케이스와 여러 입력값들을 받아야해서 조금 복잡해 보일 수 있지만,
테스트 케이스에 따른 입력값들을 받고 그 값들에 대한 BFS를 구하면 된다.

3. 한 번에 풀지 못했다면 이유?
-------------------------------------------------------------------------------------------*/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;
public class Main{
	static int M,N,K;
	static int[][] cabbage;
	static boolean[][] check;
	
	public static void main(String[] args) throws IOException {
		BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
		int T=Integer.parseInt(br.readLine());
		
		StringTokenizer st;
		ArrayList<Integer> result=new ArrayList<Integer>();
		for(int t=0;t<T;t++) {
			int[] arr=new int[3];
			st=new StringTokenizer(br.readLine());
			for(int i=0;i<arr.length;i++) {
				arr[i]=Integer.parseInt(st.nextToken());
			}
			M=arr[0];
			N=arr[1];
			K=arr[2];
			
			cabbage=new int[N][M];
			check= new boolean[N][M];
			
			for(int i=0;i<K;i++) {
				st=new StringTokenizer(br.readLine());
				int x=Integer.parseInt(st.nextToken());
				int y=Integer.parseInt(st.nextToken());
				
				cabbage[y][x]=1;
			}
			int count=0;
			for(int i=0;i<N;i++) {
				for(int j=0;j<M;j++) {
					if(cabbage[i][j]==1&&check[i][j]==false) {
						earthworms(i,j);
						count++;
					}
				}
			}
			result.add(count);
		}
		for(int i=0;i<result.size();i++) {
			System.out.println(result.get(i));
		}
	}
	public static void earthworms(int r,int c) throws IOException {

		Queue<Integer> row=new LinkedList<Integer>();
		Queue<Integer> column=new LinkedList<Integer>();
		
		row.add(r);
		column.add(c);
		check[r][c]=true;
		while(!row.isEmpty()) {
			r=row.poll();
			c=column.poll();
			
			if(r-1>=0) {
				if(cabbage[r-1][c]==1&&check[r-1][c]==false) {
					row.add(r-1);
					column.add(c);
					check[r-1][c]=true;
				}
			}//상
			if(r+1<N) {
				if(cabbage[r+1][c]==1&&check[r+1][c]==false) {
					row.add(r+1);
					column.add(c);
					check[r+1][c]=true;
				}
			}//하
			if(c-1>=0) {
				if(cabbage[r][c-1]==1&&check[r][c-1]==false) {
					row.add(r);
					column.add(c-1);
					check[r][c-1]=true;
				}
			}//좌
			if(c+1<M) {
				if(cabbage[r][c+1]==1&&check[r][c+1]==false) {
					row.add(r);
					column.add(c+1);
					check[r][c+1]=true;
				}
			}//우
		}
		return;
	}
}
