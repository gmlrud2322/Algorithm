/*안됨 다시해야됨*/
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map.Entry;

public class Main {

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub

		String[] genres = { "classic", "pop", "classic", "classic", "pop" };
		int[] plays = { 500, 600, 150, 800, 2500 };
		int[] index = { 0, 1, 2, 3, 4 };
		// System.out.println(solution(genres,plays));
		solution(genres, plays, index);

	}

	public static int[] solution(String[] genres, int[] plays, Object List) {

		int[] answer = {};

		HashMap<String, Integer> hm = new HashMap<String, Integer>();
		ArrayList<Album> album = new ArrayList<>();
		ArrayList<Entry<String, Integer>> hmList = new ArrayList<Entry<String, Integer>>(hm.entrySet());
		int i = 0;
		for (String genre : genres) {
			hm.put(genre, hm.getOrDefault(genre, 0) + plays[i]);
			i++;
		}

		Comparator<Entry<String, Integer>> compare = new Comparator<>() {

			@Override
			public int compare(Entry<String, Integer> o1, Entry<String, Integer> o2) {
				// TODO Auto-generated method stub
				return o2.getValue() - o1.getValue();
			}
		};
		Comparator<Album> compare2 = new Comparator<>() {

			@Override
			public int compare(Album o1, Album o2) {
				// TODO Auto-generated method stub
				if (o1.play == o2.play) {
					return o1.index - o2.index;
				}
				return o2.play - o1.play;
			}

		};
		Collections.sort(hmList, compare);
		Collections.sort(album, compare2);
		ArrayList<Integer> result = new ArrayList<>();
		for (Entry<String, Integer> entry : hmList) {
			String genre = entry.getKey();
			int count = 0;
			for (Album a : album) {
				if (genre.equals(a.genre) && count < 2) {
					result.add(a.index);
					count++;
				}
			}
		}
		for (int k = 0; k < result.size(); k++) {
			answer[k] = result.get(k);
		}

		return answer;
	}

}

class Album {
	int index;
	String genre;
	int play;

	public Album(String genre, int play, int index) {
		this.genre = genre;
		this.play = play;
		this.index = index;
	}

}
