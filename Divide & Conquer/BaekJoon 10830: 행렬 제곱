/*
1. 문제: 행렬 제곱
크기가 N*N인 행렬 A가 주어진다. 이때, A의 B제곱을 구하는 프로그램을 작성하시오. 
수가 매우 커질 수 있으니, A^B의 각 원소를 1,000으로 나눈 나머지를 출력한다.

입력) 첫째 줄에 행렬의 크기 N과 B가 주어진다. (2 ≤ N ≤  5, 1 ≤ B ≤ 100,000,000,000)
      둘째 줄부터 N개의 줄에 행렬의 각 원소가 주어진다. 행렬의 각 원소는 1,000보다 작거나 같은 자연수 또는 0이다.
출력) 첫째 줄부터 N개의 줄에 걸쳐 행렬 A를 B제곱한 결과를 출력한다.

2. 풀이
분할 정복방법을 이용하면 풀 수 있다.
B제곱을 분할하여 값을 구하는 방법으로 풀면 된다.
행렬의 곱셈 규칙을 생각한다.
모듈러 원리 생각해서 1000이라는 값으로 나눠준다.

3. 한 번에 풀지 못 했다면 이유?
입력 조건에 행렬의 각 원소는 1000보다 작거나 같은 자연수 또는 0이다.
B=1인 경우 원소에 1000이 들어가는 경우는 0이 출력돼야한다.

---------------------------------------------------------------------*/

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.util.StringTokenizer;

class Main {
  static int N;
  static final long d=1000;
  public static void main(String[] args) throws IOException{
    BufferedReader br=new BufferedReader(new InputStreamReader(System.in));
    BufferedWriter bw=new BufferedWriter(new OutputStreamWriter(System.out));

    StringTokenizer st=new StringTokenizer(br.readLine()," ");
    N=Integer.parseInt(st.nextToken());
    long B=Long.parseLong(st.nextToken());
    long[][] matrix=new long[N][N];
    long[][] result=new long[N][N];
    
    for(int i=0;i<N;i++){
      st=new StringTokenizer(br.readLine(), " ");
      for(int j=0;j<N;j++){
        matrix[i][j]=Long.parseLong(st.nextToken());
      }
    }

    result=square(matrix, B);
    for(int i=0;i<N;i++){
      for(int j=0;j<N;j++){
        bw.write(String.valueOf(result[i][j]%d)+" ");
      }
      bw.write('\n');
    }
    
    bw.close();
  }

  static long[][] square(long[][] matrix, long B){
    if(B==1){
      return matrix;
    }

    long[][] temp = square(matrix, B/2);
    if(B%2==1){
      return multiply(multiply(temp,temp),matrix);
    }
    
    return multiply(temp,temp);
  }

  static long[][] multiply(long[][] A,long[][] B){
    long[][] mult=new long[N][N];
    for(int i=0;i<N;i++){
      for(int j=0;j<N;j++){
        for(int k=0;k<N;k++){
          mult[i][j] =(mult[i][j]+ ((A[i][k]%d)*(B[k][j]%d)))%d;
        }
      }
    }
    return mult;
  }
}
